#!/bin/sh -uo pipefail

# make-cbz.sh
# Create a .CBZ file of all the images in a directory.
# Leave non-image files in place.
#
# This is a more robust version of the following simple command to zip only images:
#     zip -0 --latest-time -m -r "$ZIPFILE" "$DIR" \
#     -i '*.jpeg' -i '*.jpg' -i '*.gif' -i '*.png' -i '*.svg' -i '*.webp' -i '*.heic' -i '*.avif' \
#     -i '*.JPEG' -i '*.JPG' -i '*.GIF' -i '*.PNG' -i '*.SVG' -i '*.WEBP' -i '*.HEIC' -i '*.AVIF'
#
# Example:
#     > make-cbz images/
#     ...
#     Created images.cbz
#
# Example: zip all subdirectories individually
#     > make-cbz */
#     ...
#     Created a.cbz
#     Created b.cbz
#     Created c.cbz
#
# Example: use a different extension (default .cbz)
#     > EXTENSION=zip make-cbz images/
#     ...
#     Created images.zip


EXTENSION=".${EXTENSION:-cbz}"

# Function to identify image files based on content
function list_images() {
	find "$1" \
		| sort --version-sort \
		| filter_images
}

function filter_images() {
    local filename
    while read -r filename; do
        [ -f "$filename" ] || continue # must be a regular file
    	case "$(file -b --mime-type "$filename")" in
    		"image/vnd."* )
				# Filter out vendor-specific formats that are not supported in most viewers
				# such as "image/vnd.adobe.photoshop"
				continue
				;;
    		"image/"* )
				# Select all other "image" types
				# https://www.iana.org/assignments/media-types/media-types.xhtml#image
				echo "$filename"
				;;
		esac
    done
}

function zip_images_in_dir() { (
  	# Run in a subshell that will exit on the first error
  	set -e

	DIR="$1"
	if [ ! -d "$DIR" ]; then
		echo Error: "$DIR" is not a directory. Skipped.
		return 1
	fi

	# Work relative to parent folder of DIR, to standardize paths within zip files.
	cd "$DIR"
	DIR="$(basename "$PWD")"
	cd ..

	# Check whether this zipfile has already been created.
	ZIPFILE="${DIR%/}$EXTENSION"
	if [ -f "$ZIPFILE" ]; then
		echo Error: "$ZIPFILE" already exists. Skipped.
		return 2
	fi
	if [ -f "${DIR}/$(basename "$ZIPFILE")" ]; then
		echo "$ZIPFILE" already exists within "$DIR". Skipped.
		return 3
	fi
	echo Creating "$ZIPFILE"...

	# Zip identified images with no compression, and remove original files
	list_images "$DIR" | zip -0 --latest-time -m "$ZIPFILE" -@

	if [ ! -f "$ZIPFILE" ]; then
		echo Error: "$ZIPFILE" was not created.
		return 5
	fi
	echo Created "$ZIPFILE"

	# Remove empty folders.
	# (zip -m is supposed to handle this but find is more thorough)
	# TODO: check how this handles @eaDir
	find "$DIR" -name ".DS_Store" -delete
	find "$DIR" -type d -empty -delete

	# If main directory was not empty, move zipfile into it to stay with related files.
	if [ -d "$DIR" ]; then
		mv "$ZIPFILE" "$DIR"/
		echo Moved "$ZIPFILE" into "$DIR/"
	fi
	return 0
) }

# Main routine: loop over command-line arguments
for DIR; do
	echo
	zip_images_in_dir "$DIR"
done
